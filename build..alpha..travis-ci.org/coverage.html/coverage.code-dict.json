{"/home/travis/build/npmtest/node-npmtest-karma-jasmine/test.js":"/* istanbul instrument in package npmtest_karma_jasmine */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-jasmine/lib.npmtest_karma_jasmine.js":"/* istanbul instrument in package npmtest_karma_jasmine */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_karma_jasmine = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_karma_jasmine = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-jasmine/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-karma-jasmine && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_karma_jasmine */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_karma_jasmine\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_karma_jasmine.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_karma_jasmine.rollup.js'] =\n            local.assetsDict['/assets.npmtest_karma_jasmine.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_karma_jasmine.__dirname + '/lib.npmtest_karma_jasmine.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-jasmine/node_modules/karma-jasmine/lib/index.js":"var path = require('path')\n\nvar createPattern = function (pattern) {\n  return {pattern: pattern, included: true, served: true, watched: false}\n}\n\nvar initJasmine = function (files) {\n  var jasminePath = path.dirname(require.resolve('jasmine-core'))\n  files.unshift(createPattern(path.join(__dirname, '/adapter.js')))\n  files.unshift(createPattern(path.join(__dirname, '/boot.js')))\n  files.unshift(createPattern(jasminePath + '/jasmine-core/jasmine.js'))\n}\n\ninitJasmine.$inject = ['config.files']\n\nmodule.exports = {\n  'framework:jasmine': ['factory', initJasmine]\n}\n","/home/travis/build/npmtest/node-npmtest-karma-jasmine/node_modules/karma-jasmine/wallaby.js":"module.exports = function () {\n  return {\n    files: [\n      {pattern: 'node_modules/socket.io-client/socket.io.js', instrument: false},\n      {pattern: 'node_modules/karma/static/karma.js', instrument: false},\n\n      'src/adapter.js',\n      'test/mocks.js'\n    ],\n\n    tests: [\n      'test/**/*.spec.js'\n    ],\n\n    setup: function () {\n      window.__karma__ = window.karma\n    },\n\n    testFramework: 'jasmine@2.4.1'\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-karma-jasmine/node_modules/karma-jasmine/lib/adapter.js":"(function(window) {\n\n/*eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"(createSpecFilter|createStartFn)\" }]*/\n\n'use strict'\n\n/**\n * Decision maker for whether a stack entry is considered external to jasmine and karma.\n * @param  {String}  entry Error stack entry.\n * @return {Boolean}       True if external, False otherwise.\n */\nfunction isExternalStackEntry (entry) {\n  return !!entry &&\n  // entries related to jasmine and karma-jasmine:\n  !/\\/(jasmine-core|karma-jasmine)\\//.test(entry) &&\n  // karma specifics, e.g. \"at http://localhost:7018/karma.js:185\"\n  !/\\/(karma.js|context.html):/.test(entry)\n}\n\n/**\n * Returns relevant stack entries.\n * @param  {String} stack Complete error stack trace.\n * @return {Array}        A list of relevant stack entries.\n */\nfunction getRelevantStackFrom (stack) {\n  var filteredStack = []\n  var relevantStack = []\n\n  stack = stack.split('\\n')\n\n  for (var i = 0; i < stack.length; i += 1) {\n    if (isExternalStackEntry(stack[i])) {\n      filteredStack.push(stack[i])\n    }\n  }\n\n  // If the filtered stack is empty, i.e. the error originated entirely from within jasmine or karma, then the whole stack\n  // should be relevant.\n  if (filteredStack.length === 0) {\n    filteredStack = stack\n  }\n\n  for (i = 0; i < filteredStack.length; i += 1) {\n    if (filteredStack[i]) {\n      relevantStack.push(filteredStack[i])\n    }\n  }\n\n  return relevantStack\n}\n\n/**\n * Custom formatter for a failed step.\n *\n * Different browsers report stack trace in different ways. This function\n * attempts to provide a concise, relevant error message by removing the\n * unnecessary stack traces coming from the testing framework itself as well\n * as possible repetition.\n *\n * @see    https://github.com/karma-runner/karma-jasmine/issues/60\n * @param  {Object} step Step object with stack and message properties.\n * @return {String}      Formatted step.\n */\nfunction formatFailedStep (step) {\n  // Safari seems to have no stack trace,\n  // so we just return the error message:\n  if (!step.stack) { return step.message }\n\n  var relevantMessage = []\n  var relevantStack = []\n\n  // Remove the message prior to processing the stack to prevent issues like\n  // https://github.com/karma-runner/karma-jasmine/issues/79\n  var stack = step.stack.replace('Error: ' + step.message, '')\n\n  var dirtyRelevantStack = getRelevantStackFrom(stack)\n\n  // PhantomJS returns multiline error message for errors coming from specs\n  // (for example when calling a non-existing function). This error is present\n  // in both `step.message` and `step.stack` at the same time, but stack seems\n  // preferable, so we iterate relevant stack, compare it to message:\n  for (var i = 0; i < dirtyRelevantStack.length; i += 1) {\n    if (step.message && step.message.indexOf(dirtyRelevantStack[i]) === -1) {\n      // Stack entry is not in the message,\n      // we consider it to be a relevant stack:\n      relevantStack.push(dirtyRelevantStack[i])\n    } else {\n      // Stack entry is already in the message,\n      // we consider it to be a suitable message alternative:\n      relevantMessage.push(dirtyRelevantStack[i])\n    }\n  }\n\n  // In most cases the above will leave us with an empty message...\n  if (relevantMessage.length === 0) {\n    // Let's reuse the original message:\n    relevantMessage.push(step.message)\n\n    // Now we probably have a repetition case where:\n    // relevantMessage: [\"Expected true to be false.\"]\n    // relevantStack:   [\"Error: Expected true to be false.\", ...]\n    if (relevantStack.length && relevantStack[0].indexOf(step.message) !== -1) {\n      // The message seems preferable, so we remove the first value from\n      // the stack to get rid of repetition :\n      relevantStack.shift()\n    }\n  }\n\n  // Example output:\n  // --------------------\n  // Chrome 40.0.2214 (Mac OS X 10.9.5) xxx should return false 1 FAILED\n  //    Expected true to be false\n  //    at /foo/bar/baz.spec.js:22:13\n  //    at /foo/bar/baz.js:18:29\n  return relevantMessage.concat(relevantStack).join('\\n')\n}\n\nfunction SuiteNode (name, parent) {\n  this.name = name\n  this.parent = parent\n  this.children = []\n\n  this.addChild = function (name) {\n    var suite = new SuiteNode(name, this)\n    this.children.push(suite)\n    return suite\n  }\n}\n\nfunction processSuite (suite, pointer) {\n  var child\n  var childPointer\n\n  for (var i = 0; i < suite.children.length; i++) {\n    child = suite.children[i]\n\n    if (child.children) {\n      childPointer = pointer[child.description] = {_: []}\n      processSuite(child, childPointer)\n    } else {\n      if (!pointer._) {\n        pointer._ = []\n      }\n      pointer._.push(child.description)\n    }\n  }\n}\n\nfunction getAllSpecNames (topSuite) {\n  var specNames = {}\n\n  processSuite(topSuite, specNames)\n\n  return specNames\n}\n\n/**\n * Very simple reporter for Jasmine.\n */\nfunction KarmaReporter (tc, jasmineEnv) {\n  var currentSuite = new SuiteNode()\n\n  // Save link on native Date object\n  // because user can mock it\n  var _Date = Date\n\n  /**\n   * @param suite\n   * @returns {boolean} Return true if it is system jasmine top level suite\n   */\n  function isTopLevelSuite (suite) {\n    return suite.description === 'Jasmine_TopLevel_Suite'\n  }\n\n  /**\n   * Jasmine 2.0 dispatches the following events:\n   *\n   *  - jasmineStarted\n   *  - jasmineDone\n   *  - suiteStarted\n   *  - suiteDone\n   *  - specStarted\n   *  - specDone\n   */\n\n  this.jasmineStarted = function (data) {\n    // TODO(vojta): Do not send spec names when polling.\n    tc.info({\n      total: data.totalSpecsDefined,\n      specs: getAllSpecNames(jasmineEnv.topSuite())\n    })\n  }\n\n  this.jasmineDone = function (result) {\n    result = result || {}\n    tc.complete({\n      order: result.order,\n      coverage: window.__coverage__\n    })\n  }\n\n  this.suiteStarted = function (result) {\n    if (!isTopLevelSuite(result)) {\n      currentSuite = currentSuite.addChild(result.description)\n    }\n  }\n\n  this.suiteDone = function (result) {\n    // In the case of xdescribe, only \"suiteDone\" is fired.\n    // We need to skip that.\n    if (result.description !== currentSuite.name) {\n      return\n    }\n\n    currentSuite = currentSuite.parent\n  }\n\n  this.specStarted = function (specResult) {\n    specResult.startTime = new _Date().getTime()\n  }\n\n  this.specDone = function (specResult) {\n    var skipped = specResult.status === 'disabled' || specResult.status === 'pending'\n\n    var result = {\n      description: specResult.description,\n      id: specResult.id,\n      log: [],\n      skipped: skipped,\n      disabled: specResult.status === 'disabled',\n      pending: specResult.status === 'pending',\n      success: specResult.failedExpectations.length === 0,\n      suite: [],\n      time: skipped ? 0 : new _Date().getTime() - specResult.startTime,\n      executedExpectationsCount: specResult.failedExpectations.length + specResult.passedExpectations.length\n    }\n\n    // generate ordered list of (nested) suite names\n    var suitePointer = currentSuite\n    while (suitePointer.parent) {\n      result.suite.unshift(suitePointer.name)\n      suitePointer = suitePointer.parent\n    }\n\n    if (!result.success) {\n      var steps = specResult.failedExpectations\n      for (var i = 0, l = steps.length; i < l; i++) {\n        result.log.push(formatFailedStep(steps[i]))\n      }\n    }\n\n    tc.result(result)\n    delete specResult.startTime\n  }\n}\n\n/**\n * Extract grep option from karma config\n * @param {[Array|string]} clientArguments The karma client arguments\n * @return {string} The value of grep option by default empty string\n */\nvar getGrepOption = function (clientArguments) {\n  var grepRegex = /^--grep=(.*)$/\n\n  if (Object.prototype.toString.call(clientArguments) === '[object Array]') {\n    var indexOfGrep = indexOf(clientArguments, '--grep')\n\n    if (indexOfGrep !== -1) {\n      return clientArguments[indexOfGrep + 1]\n    }\n\n    return map(filter(clientArguments, function (arg) {\n      return grepRegex.test(arg)\n    }), function (arg) {\n      return arg.replace(grepRegex, '$1')\n    })[0] || ''\n  } else if (typeof clientArguments === 'string') {\n    var match = /--grep=([^=]+)/.exec(clientArguments)\n\n    return match ? match[1] : ''\n  }\n}\n\n/**\n * Create jasmine spec filter\n * @param {Object} options Spec filter options\n */\nvar KarmaSpecFilter = function (options) {\n  var filterString = options && options.filterString() && options.filterString().replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n  var filterPattern = new RegExp(filterString)\n\n  this.matches = function (specName) {\n    return filterPattern.test(specName)\n  }\n}\n\n/**\n * @param {Object} config The karma config\n * @param {Object} jasmineEnv jasmine environment object\n */\nvar createSpecFilter = function (config, jasmineEnv) {\n  var specFilter = new KarmaSpecFilter({\n    filterString: function () {\n      return getGrepOption(config.args)\n    }\n  })\n\n  jasmineEnv.specFilter = function (spec) {\n    return specFilter.matches(spec.getFullName())\n  }\n}\n\n/**\n * Karma starter function factory.\n *\n * This function is invoked from the wrapper.\n * @see  adapter.wrapper\n *\n * @param  {Object}   karma        Karma runner instance.\n * @param  {Object}   [jasmineEnv] Optional Jasmine environment for testing.\n * @return {Function}              Karma starter function.\n */\nfunction createStartFn (karma, jasmineEnv) {\n  // This function will be assigned to `window.__karma__.start`:\n  return function () {\n    var clientConfig = karma.config || {}\n    var jasmineConfig = clientConfig.jasmine || {}\n\n    jasmineEnv = jasmineEnv || window.jasmine.getEnv()\n\n    setOption(jasmineConfig.stopOnFailure, jasmineEnv.throwOnExpectationFailure)\n    setOption(jasmineConfig.seed, jasmineEnv.seed)\n    setOption(jasmineConfig.random, jasmineEnv.randomizeTests)\n\n    jasmineEnv.addReporter(new KarmaReporter(karma, jasmineEnv))\n    jasmineEnv.execute()\n  }\n\n  function setOption (option, set) {\n    if (option != null) {\n      set(option)\n    }\n  }\n}\n\nfunction indexOf (collection, find, i /* opt*/) {\n  if (collection.indexOf) {\n    return collection.indexOf(find, i)\n  }\n\n  if (i === undefined) { i = 0 }\n  if (i < 0) { i += collection.length }\n  if (i < 0) { i = 0 }\n  for (var n = collection.length; i < n; i++) {\n    if (i in collection && collection[i] === find) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction filter (collection, filter, that /* opt*/) {\n  if (collection.filter) {\n    return collection.filter(filter, that)\n  }\n\n  var other = []\n  var v\n  for (var i = 0, n = collection.length; i < n; i++) {\n    if (i in collection && filter.call(that, v = collection[i], i, collection)) {\n      other.push(v)\n    }\n  }\n  return other\n}\n\nfunction map (collection, mapper, that /* opt*/) {\n  if (collection.map) {\n    return collection.map(mapper, that)\n  }\n\n  var other = new Array(collection.length)\n  for (var i = 0, n = collection.length; i < n; i++) {\n    if (i in collection) {\n      other[i] = mapper.call(that, collection[i], i, collection)\n    }\n  }\n  return other\n}\n\n\ncreateSpecFilter(window.__karma__.config, jasmine.getEnv())\nwindow.__karma__.start = createStartFn(window.__karma__)\n\n})(typeof window !== 'undefined' ? window : global);\n","/home/travis/build/npmtest/node-npmtest-karma-jasmine/node_modules/karma-jasmine/lib/boot.js":"/**\n * Jasmine 2.0 standalone `boot.js` modified for Karma.\n * This file is registered in `index.js`. This version\n * does not include `HtmlReporter` setup.\n */\n;(function (global) {\n  /*global jasmineRequire */\n  'use strict'\n\n  /**\n   * Require Jasmine's core files. Specifically, this requires and\n   * attaches all of Jasmine's code to the `jasmine` reference.\n   */\n  var jasmine = jasmineRequire.core(jasmineRequire)\n\n  /**\n   * Obtain the public Jasmine API.\n   */\n  var jasmineInterface = jasmineRequire.interface(jasmine, jasmine.getEnv())\n\n  /**\n   * Setting up timing functions to be able to be overridden.\n   * Certain browsers (Safari, IE 8, PhantomJS) require this hack.\n   */\n  global.setTimeout = global.setTimeout\n  global.setInterval = global.setInterval\n  global.clearTimeout = global.clearTimeout\n  global.clearInterval = global.clearInterval\n\n  /**\n   * Add all of the Jasmine global/public interface to the proper\n   * global, so a project can use the public interface directly.\n   * For example, calling `describe` in specs instead of\n   * `jasmine.getEnv().describe`.\n   */\n  for (var property in jasmineInterface) {\n    if (jasmineInterface.hasOwnProperty(property)) {\n      global[property] = jasmineInterface[property]\n    }\n  }\n}(typeof window !== 'undefined' ? window : global))\n"}